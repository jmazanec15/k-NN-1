/*
 *  Copyright OpenSearch Contributors
 *  SPDX-License-Identifier: Apache-2.0
 */

import org.opensearch.gradle.testclusters.StandaloneRestIntegTestTask

apply plugin: 'opensearch.testclusters'
apply plugin: 'opensearch.build'
apply plugin: 'opensearch.rest-test'

dependencies {
    api "org.opensearch:opensearch:${opensearch_version}"
    compileOnly "org.opensearch.plugin:opensearch-scripting-painless-spi:${versions.opensearch}"
    api group: 'commons-lang', name: 'commons-lang', version: '2.6'

    api "org.apache.logging.log4j:log4j-api:${versions.log4j}"
    api "org.apache.logging.log4j:log4j-core:${versions.log4j}"

    testImplementation "org.opensearch.test:framework:${opensearch_version}"
    testImplementation(testFixtures(rootProject))
}

String baseName = "knnBwcCluster"

def tmp_dir = project.file('build/private/artifact_tmp').absoluteFile
tmp_dir.mkdirs()

task pullBwcPlugin {
    doLast {
        exec {
            workingDir tmp_dir.absolutePath
            commandLine "curl", "-O", "https://artifacts.opensearch.org/releases/bundle/opensearch/${knn_bwc_version}/opensearch-${knn_bwc_version}-linux-x64.tar.gz"
        }
        exec {
            workingDir tmp_dir.absolutePath
            commandLine "tar", "-zxf", "opensearch-${knn_bwc_version}-linux-x64.tar.gz"
        }
        exec {
            workingDir tmp_dir.absolutePath
            commandLine "cp", "-r", "opensearch-${knn_bwc_version}/plugins/opensearch-knn", "./"
        }
        exec {
            workingDir tmp_dir.absolutePath
            commandLine "rm", "-rf", "opensearch-${knn_bwc_version}-linux-x64.tar.gz", "opensearch-${knn_bwc_version}"
        }
    }
}

task zipBwcPlugin(type: Zip) {
    dependsOn "pullBwcPlugin"
    from(tmp_dir.absolutePath + "/opensearch-knn")
    destinationDirectory = tmp_dir
    archiveFileName = "opensearch-knn-${knn_bwc_version}.zip"
}

testClusters {
    "${baseName}" {
        testDistribution = "ARCHIVE"
        versions = [knn_bwc_version, opensearch_version]
        numberOfNodes = 3
        plugin(project.tasks.zipBwcPlugin.archiveFile)
        setting 'path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
        setting 'http.content_type.required', 'true'
        environment "LD_LIBRARY_PATH", "${buildDir}/testclusters/${baseName}-0/distro/${knn_bwc_version}-ARCHIVE/plugins/opensearch-knn/knnlib"
        systemProperty "java.library.path", "${buildDir}/testclusters/${baseName}-0/distro/${knn_bwc_version}-ARCHIVE/plugins/opensearch-knn/knnlib"
    }
}

task oldVersionClusterTask(type: StandaloneRestIntegTestTask) {
    dependsOn "zipBwcPlugin"
    useCluster testClusters."${baseName}"
    systemProperty 'tests.rest.bwcsuite_cluster', 'old_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'old'
    systemProperty 'tests.plugin_bwc_version', knn_bwc_version
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

task fullRestartClusterTask(type: StandaloneRestIntegTestTask) {
    dependsOn "oldVersionClusterTask"
    dependsOn rootProject.tasks.buildJniLib
    dependsOn rootProject.tasks.assemble
    useCluster testClusters."${baseName}"
    doFirst {
        testClusters."${baseName}".environment("java.library.path", "$rootDir/jni/release")
        testClusters."${baseName}".systemProperty("java.library.path", "$rootDir/jni/release")
        testClusters."${baseName}".upgradeAllNodesAndPluginsToNextVersion([rootProject.tasks.bundlePlugin.archiveFile])
    }
    systemProperty 'tests.rest.bwcsuite_cluster', 'upgraded_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'fullrestart'
    systemProperty 'tests.plugin_bwc_version', knn_bwc_version
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

task bwcTestSuite {
    dependsOn "fullRestartClusterTask"
}
