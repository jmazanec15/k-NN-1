/*
 *  Copyright OpenSearch Contributors
 *  SPDX-License-Identifier: Apache-2.0
 */

import org.opensearch.gradle.testclusters.StandaloneRestIntegTestTask

apply plugin: 'opensearch.testclusters'
apply plugin: 'opensearch.build'
apply plugin: 'opensearch.rest-test'

// Disable a few tasks that come with build
build.enabled = false
integTest.enabled = false
test.enabled = false
assemble.enabled = false
dependenciesInfo.enabled = false

dependencies {
    api "org.opensearch:opensearch:${opensearch_version}"
    compileOnly "org.opensearch.plugin:opensearch-scripting-painless-spi:${versions.opensearch}"
    api group: 'commons-lang', name: 'commons-lang', version: '2.6'

    api "org.apache.logging.log4j:log4j-api:${versions.log4j}"
    api "org.apache.logging.log4j:log4j-core:${versions.log4j}"

    testImplementation "org.opensearch.test:framework:${opensearch_version}"
    testImplementation(testFixtures(rootProject))
}


def tmp_dir = project.file('build/private/artifact_tmp').absoluteFile
tmp_dir.mkdirs()
String knn_bwc_version = System.getProperty("bwc.version")

// Task to pull k-NN plugin from archive
task pullBwcPlugin {
    doLast {
        exec {
            workingDir tmp_dir.absolutePath
            commandLine "curl", "-O", "https://artifacts.opensearch.org/releases/bundle/opensearch/${knn_bwc_version}/opensearch-${knn_bwc_version}-linux-x64.tar.gz"
        }
        exec {
            workingDir tmp_dir.absolutePath
            commandLine "tar", "-zxf", "opensearch-${knn_bwc_version}-linux-x64.tar.gz"
        }
        exec {
            workingDir tmp_dir.absolutePath
            commandLine "cp", "-r", "opensearch-${knn_bwc_version}/plugins/opensearch-knn", "./"
        }
        exec {
            workingDir tmp_dir.absolutePath
            commandLine "rm", "-rf", "opensearch-${knn_bwc_version}"
        }
    }
}

// Task to zip plugin from archive
task zipBwcPlugin(type: Zip) {
    dependsOn "pullBwcPlugin"
    from(tmp_dir.absolutePath + "/opensearch-knn")
    destinationDirectory = tmp_dir
    archiveFileName = "opensearch-knn-${knn_bwc_version}.zip"
}

String baseName = "knnBwcCluster"
def clusterNames = [baseName + "-rolling", baseName + "-restart"] as String[]

// Creates two test clusters of previous version and loads k-NN plugin of bwcVersion
2.times { i ->
    testClusters {
        "${clusterNames[i]}" {
            testDistribution = "ARCHIVE"
            versions = [knn_bwc_version, opensearch_version]
            numberOfNodes = 3
            plugin(project.tasks.zipBwcPlugin.archiveFile)
            setting 'path.repo', "${buildDir}/cluster/shared/repo/${clusterNames[i]}"
            setting 'http.content_type.required', 'true'
            environment "LD_LIBRARY_PATH", "${buildDir}/testclusters/${clusterNames[i]}-0/distro/${knn_bwc_version}-ARCHIVE/plugins/opensearch-knn/knnlib"
            systemProperty "java.library.path", "${buildDir}/testclusters/${clusterNames[i]}-0/distro/${knn_bwc_version}-ARCHIVE/plugins/opensearch-knn/knnlib"
        }
    }

}

// Creates 2 tasks to run BWC tests against the old clusters
2.times { i ->
    task "${clusterNames[i]}#testAgainstOldCluster"(type: StandaloneRestIntegTestTask) {
        dependsOn "zipBwcPlugin"
        useCluster testClusters."${clusterNames[i]}"
        systemProperty 'tests.rest.bwcsuite_cluster', 'old_cluster'
        systemProperty 'tests.rest.bwcsuite_round', 'old'
        systemProperty 'tests.plugin_bwc_version', knn_bwc_version
        nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${clusterNames[i]}".allHttpSocketURI.join(",")}")
        nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${clusterNames[i]}".getName()}")
        systemProperty 'tests.security.manager', 'false'
    }
}

// Part of rolling upgrade. Upgrades one node of the old cluster to new OpenSearch version with upgraded plugin version
// This results in a mixed cluster with 2 nodes on the old version and 1 upgraded node.
task testAgainstOneThirdUpgradedCluster (type: StandaloneRestIntegTestTask) {
    useCluster testClusters."${clusterNames[0]}"
    dependsOn rootProject.tasks.buildJniLib
    dependsOn rootProject.tasks.assemble
    dependsOn "${clusterNames[0]}#testAgainstOldCluster"
    doFirst {
        testClusters."${clusterNames[0]}".getNodes().getAt("${clusterNames[0]}" + "-0").environment("LD_LIBRARY_PATH", "$rootDir/jni/release")
        testClusters."${clusterNames[0]}".getNodes().getAt("${clusterNames[0]}" + "-0").systemProperty("java.library.path", "$rootDir/jni/release")
        testClusters."${clusterNames[0]}".upgradeNodeAndPluginToNextVersion([rootProject.tasks.bundlePlugin.archiveFile])
    }
    systemProperty 'tests.rest.bwcsuite_cluster', 'mixed_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'first'
    systemProperty 'tests.plugin_bwc_version', knn_bwc_version
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${clusterNames[0]}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${clusterNames[0]}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// Part of rolling upgrade. Upgrades the second node to new OpenSearch version with upgraded plugin version after the
// first node is upgraded. This results in a mixed cluster with 1 node on the old version and 2 upgraded nodes.
task testAgainstTwoThirdsUpgradedCluster(type: StandaloneRestIntegTestTask) {
    dependsOn "testAgainstOneThirdUpgradedCluster"
    useCluster testClusters."${clusterNames[0]}"
    doFirst {
        testClusters."${clusterNames[0]}".getNodes().getAt("${clusterNames[0]}" + "-1").environment("LD_LIBRARY_PATH", "$rootDir/jni/release")
        testClusters."${clusterNames[0]}".getNodes().getAt("${clusterNames[0]}" + "-1").systemProperty("java.library.path", "$rootDir/jni/release")
        testClusters."${clusterNames[0]}".upgradeNodeAndPluginToNextVersion([rootProject.tasks.bundlePlugin.archiveFile])
    }
    systemProperty 'tests.rest.bwcsuite_cluster', 'mixed_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'second'
    systemProperty 'tests.plugin_bwc_version', knn_bwc_version
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${clusterNames[0]}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${clusterNames[0]}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// Part of rolling upgrade. Upgrades the third node to new OpenSearch version with upgraded plugin version after the
// second node is upgraded. This results in a fully upgraded cluster.
task testRollingUpgrade(type: StandaloneRestIntegTestTask) {
    dependsOn "testAgainstTwoThirdsUpgradedCluster"
    useCluster testClusters."${clusterNames[0]}"
    doFirst {
        testClusters."${clusterNames[0]}".getNodes().getAt("${clusterNames[0]}" + "-2").environment("LD_LIBRARY_PATH", "$rootDir/jni/release")
        testClusters."${clusterNames[0]}".getNodes().getAt("${clusterNames[0]}" + "-2").systemProperty("java.library.path", "$rootDir/jni/release")
        testClusters."${clusterNames[0]}".upgradeNodeAndPluginToNextVersion([rootProject.tasks.bundlePlugin.archiveFile])
    }
    mustRunAfter "testAgainstOneThirdUpgradedCluster"
    systemProperty 'tests.rest.bwcsuite_cluster', 'mixed_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'third'
    systemProperty 'tests.plugin_bwc_version', knn_bwc_version
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${clusterNames[0]}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${clusterNames[0]}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// Part of restart cluster tests. First, tests run against old cluster. Then, all nodes are upgraded and tests are
// re-ran
task testRestartUpgrade(type: StandaloneRestIntegTestTask) {
    dependsOn "${clusterNames[1]}#testAgainstOldCluster"
    dependsOn rootProject.tasks.buildJniLib
    dependsOn rootProject.tasks.assemble
    useCluster testClusters."${clusterNames[1]}"
    doFirst {
        testClusters."${clusterNames[1]}".environment("java.library.path", "$rootDir/jni/release")
        testClusters."${clusterNames[1]}".systemProperty("java.library.path", "$rootDir/jni/release")
        testClusters."${clusterNames[1]}".upgradeAllNodesAndPluginsToNextVersion([rootProject.tasks.bundlePlugin.archiveFile])
    }
    systemProperty 'tests.rest.bwcsuite_cluster', 'upgraded_cluster'
    systemProperty 'tests.rest.bwcsuite_round', 'fullrestart'
    systemProperty 'tests.plugin_bwc_version', knn_bwc_version
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${clusterNames[1]}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${clusterNames[1]}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// Task to run both fullRestartClusterTests and rollingUpgradeClusterTests
task bwcTestSuite {
    dependsOn "testRestartUpgrade"
    dependsOn "testRollingUpgrade"
}
